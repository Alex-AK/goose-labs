[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.0","content-config-digest","575c4ce1b7c8f2ed","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://gooselabs.tech\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","project",["Map",11,12,28,29,41,42],"discord-voice-notification-bot",{"id":11,"data":13,"body":24,"filePath":25,"digest":26,"deferredRender":27},{"title":14,"description":15,"status":16,"date":17,"stack":18,"github":23},"Discord Voice Notification Bot","A privacy-first, lightweight Discord bot that sends notifications when users join or leave voice channels.","Completed",["Date","2025-07-05T07:00:00.000Z"],[19,20,21,22],"Node.js","Discord.js","Docker","Coolify","https://github.com/Alex-AK/discord-voice-notifications","## Project Overview\n\nA privacy-first, lightweight Discord bot that sends notifications when users join or leave voice channels. Built with TypeScript and designed for self-hosting with only essential dependencies. This bot is perfect for small communities looking to create a casual, low-pressure environment for spontaneous voice chats.\n\n### Features\n\n- **Smart Notifications:** Sends join/leave notifications with configurable delays to prevent spam.\n- **Privacy-First:** No external tracking, databases, or user data storage.\n- **Configurable:** Separate channels for join/leave, customizable timing, logging levels.\n- **Production Ready:** Health monitoring, graceful shutdown, notification retry mechanism, server logging.\n- **Built-in Monitoring:** Discord slash command for bot status and server statistics.\n- **HTTP Health Endpoint:** RESTful health check endpoint for uptime monitoring and external health checks.\n- **Modern Architecture:** TypeScript, modular design, comprehensive error handling.\n- **Self-Hosting:** Deploy anywhere - no external services required.\n\n## What I Learned\n\n- Leveraged **Discord.js** to listen for voice state events and send notifications.\n- Set up a Discord bot from scratch, including **authorization scopes** for bot access and permissions management.\n- Implemented **bot commands** to check runtime status and uptime for monitoring and debugging.\n- Deployed the bot to a **self-hosted Coolify instance**, enabling zero-downtime deployments and updates.\n- Learned how to structure and maintain a **fully open-source project** with documentation for others to deploy, modify, or contribute.","src/content/project/discord-voice-notification-bot.mdx","c823cd577a7f7d43",true,"self-hosted-n8n",{"id":28,"data":30,"body":38,"filePath":39,"digest":40,"deferredRender":27},{"title":31,"description":32,"status":16,"date":33,"stack":34},"Self-Hosted n8n Automation Platform","Setting up a self-hosted n8n workflow automation platform with domain configuration, and port forwarding.",["Date","2025-07-20T07:00:00.000Z"],[21,35,36,37],"n8n","Cloudflare","Home Server","## Project Overview\n\nDeployed a self-hosted n8n instance to run AI agent workflows and custom server integrations from my home server. This project involved setting up domain management, router network configuration, and dynamic DNS updates to ensure reliable external access.\n\n### Features\n- **Workflow Automation**: Create and manage complex workflows with a visual editor.\n- **Custom Domain**: Access n8n via a custom domain with SSL/TLS security.\n- **Docker Deployment**: Containerized setup for easy management and updates.\n- **Port Forwarding**: Configured router to allow external access to n8n.\n- **Cloudflare Integration**: Used Cloudflare for DNS management and security.\n\n## What I Learned\n- Gained experience with **n8n** for workflow automation and external integration.\n- Configured **port forwarding** and router configuration for home networks.\n- Integrated **Cloudflare** for DNS management and security.\n- Understood the challenges of **dynamic IP handling** and automated updates.","src/content/project/self-hosted-n8n.mdx","c3a04e3840c52494","home-server",{"id":41,"data":43,"body":50,"filePath":51,"digest":52,"deferredRender":27},{"title":44,"description":45,"status":16,"date":46,"stack":47},"Home Server Setup with Ubuntu & Coolify","Set up a personal home server running Ubuntu Server with Coolify to manage containerized services like n8n, ollama, and Portainer.",["Date","2025-02-25T08:00:00.000Z"],[37,48,49,22,21],"Self-Hosting","Ubuntu","## Project Overview\n\nSet up a self-hosted home server running **Ubuntu Server** with **Coolify** to manage and deploy containerized applications. This project was part of a broader goal to explore self-hosting, simplify development workflows, and create a personal playground for automation and experimentation.\n\n### Features\n\n- **Ubuntu Server Deployment**: Installed a clean, minimal Linux environment optimized for headless operation.\n- **Coolify Platform**: Self-hosted PaaS for managing Docker-based applications with a slick UI.\n- **Service Ecosystem**: Deployed over 10 internal services including `n8n`, `ollama`, `Dozzle`, `Portainer`, and more.\n- **Local Network Access**: All apps accessible over local IP; internal dashboard for centralized access.\n- **Modular Hardware Setup**: Chose cost-effective, small form factor PC for low-power, 24/7 operation.\n\n## What I Learned\n\n- Evaluated and selected **home server hardware** with goals of low cost, minimal setup, and long-term flexibility.\n- Learned how to **wipe and install Ubuntu Server** from scratch, including partitioning and SSH setup.\n- Explored various **self-hosting platforms**, ultimately selecting Coolify for its balance of control and simplicity.\n- Gained hands-on experience deploying and managing **Docker containers** with persistent storage and automatic restarts.\n- Built a growing **library of self-hosted tools**, each serving a niche in automation, observability, and infrastructure control.","src/content/project/home-server.mdx","c42d7ef5146279af"]